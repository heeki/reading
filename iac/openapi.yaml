openapi: 3.0.3
info:
  title: reading-api
  description: Reading application API endpoint
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    group:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/uid"
        description:
          type: string
          minLength: 2
        is_private:
          type: boolean
      required:
        - description
        - is_private
    groups:
      type: array
      items:
        $ref: "#/components/schemas/group"
    user:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/uid"
        description:
          type: string
          minLength: 2
        email:
          type: string
          minLength: 6
        group:
          $ref: "#/components/schemas/uid"
      required:
        - description
        - email
    users:
      type: array
      items:
        $ref: "#/components/schemas/user"
    plan:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/uid"
        description:
          type: string
          minLength: 2
        is_private:
          type: boolean
      required:
        - description
        - is_private
    plans:
      type: array
      items:
        $ref: "#/components/schemas/plan"
    uid:
      type: string
      # pattern: "^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$"
      # minLength: 36
      # maxLength: 36
  responses:
    group:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/group"
          example:
            category: "group"
            uid: "e5512fda-c5ec-4485-84ac-2592cd09a985"
            description: "example group"
            is_private: false
    groups:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groups"
    user:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"
          example:
            category: "user"
            uid: "432b5bcd-ce1f-48fa-b8f8-b78bc4716178"
            description: "example user"
            email: user@example.com
    users:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users"
    plan:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/plan"
          example:
            category: "plan"
            uid: "dc35c5f4-5ef4-4399-b3bc-c0e4c5467e3e"
            description: "example plan"
            is_private: false
    plans:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/plans"
    uid:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/uid"
          example:
            uid: "7f42847e-db7c-4c16-b390-a1e7f4448919"
    error:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          example:
            code: 500
            message: "internal server error"

paths:
  /group:
    get:
      summary: group
      description: returns list of groups
      parameters:
        - in: query
          name: uid
          required: false
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/groups"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    post:
      summary: group
      description: creates group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    put:
      summary: group
      description: updates a group
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
      responses:
        200:
          $ref: "#/components/responses/group"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    delete:
      summary: group
      description: deletes a group
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
  /user:
    get:
      summary: user
      description: returns list of users
      parameters:
        - in: query
          name: uid
          required: false
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/users"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnUser}/invocations"
    post:
      summary: user
      description: create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnUser}/invocations"
    put:
      summary: user
      description: updates a user
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          $ref: "#/components/responses/user"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnUser}/invocations"
    delete:
      summary: user
      description: deletes a user
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnUser}/invocations"
  /plan:
    get:
      summary: plan
      description: returns list of plans
      parameters:
        - in: query
          name: uid
          required: false
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/plans"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnPlan}/invocations"
    post:
      summary: plan
      description: creates plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plan"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnPlan}/invocations"
    put:
      summary: plan
      description: updates a plan
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/plan"
      responses:
        200:
          $ref: "#/components/responses/plan"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: both
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnPlan}/invocations"
    delete:
      summary: plan
      description: deletes a plan
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            $ref: "#/components/schemas/uid"
      responses:
        200:
          $ref: "#/components/responses/uid"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-request-validator: param
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnPlan}/invocations"

x-amazon-apigateway-request-validators:
  both:
    validateRequestBody: true
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false
  param:
    validateRequestBody: false
    validateRequestParameters: true
