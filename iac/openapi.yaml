openapi: 3.0.1
info:
  title: reading-api
  description: Readig application API endpoint
  version: 0.1.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    group:
      type: object
      properties:
        uid:
          type: string
          required: false
        description:
          type: string
          required: true
        is_private:
          type: boolean
          required: true
    user:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        group:
          type: string
    uid:
      type: object
      properties:
        uid:
          type: string
  responses:
    error:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          example:
            code: 500
            message: "unable to retrieve message"

paths:
  /group:
    get:
      summary: group
      description: returns list of groups
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    post:
      summary: group
      description: creates group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
        required: true
      x-amazon-apigateway-request-validator: body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
  /group/{proxy+}:
    get:
      summary: group
      description: returns details of a group
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: uid
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    put:
      summary: group
      description: updates a group
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: uid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
    delete:
      summary: group
      description: deletes a group
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: uid
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"
  /user:
    get:
      summary: user
      description: returns list of users
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnUser}/invocations"
    post:
      summary: user
      description: create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        500:
          $ref: "#/components/responses/error"
        default:
          $ref: "#/components/responses/error"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FnGroup}/invocations"

x-amazon-apigateway-request-validators:
  body:
    validateRequestBody: true
    validateRequestParameters: false
  param:
    validateRequestBody: false
    validateRequestParameters: true
