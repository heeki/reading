{
  "Comment": "Daily workflow for sending out readings",
  "StartAt": "GetTodaysReading",
  "States": {
    "GetTodaysReading": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.detail.reading_endpoint",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "${Connection}"
        },
        "Headers": {
          "content-type": "application/json"
        },
        "QueryParameters": {
          "date.$": "States.ArrayGetItem(States.StringSplit($.time, 'T'), 0)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "response.$": "$.ResponseBody"
      },
      "ResultPath": "$.reading",
      "OutputPath": "$",
      "Next": "GetUsersByPlan"
    },
    "GetUsersByPlan": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.detail.user_endpoint",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "${Connection}"
        },
        "Headers": {
          "content-type": "application/json"
        },
        "QueryParameters": {
          "plan_id.$": "$.detail.plan_id"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "response.$": "$.ResponseBody"
      },
      "ResultPath": "$.users",
      "OutputPath": "$",
      "Next": "SendReading"
    },
    "SendReading": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${Topic}",
        "Subject.$": "States.Format('Daily Reading for {}', States.ArrayGetItem(States.StringSplit($.time, 'T'), 0))",
        "Message.$": "$.reading.response.body"
      },
      "ResultSelector": {
        "message_id.$": "$.MessageId",
        "request_id.$": "$.SdkResponseMetadata.RequestId"
      },
      "ResultPath": "$.publish_result",
      "OutputPath": "$",
      "End": true
    }
  }
}