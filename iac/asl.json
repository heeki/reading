{
  "Comment": "Daily workflow for sending out readings",
  "StartAt": "GetTodaysReading",
  "States": {
    "GetTodaysReading": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.detail.reading_endpoint",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "${Connection}"
        },
        "Headers": {
          "content-type": "application/json"
        },
        "QueryParameters": {
          "date.$": "States.ArrayGetItem(States.StringSplit($.time, 'T'), 0)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "response.$": "$.ResponseBody"
      },
      "ResultPath": "$.reading",
      "OutputPath": "$",
      "Next": "GetUsersByPlan"
    },
    "GetUsersByPlan": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.detail.user_endpoint",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "${Connection}"
        },
        "Headers": {
          "content-type": "application/json"
        },
        "QueryParameters": {
          "plan_id.$": "$.detail.plan_id",
          "is_subscribed": true
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "response.$": "$.ResponseBody",
        "emails.$": "$.ResponseBody[*].email"
      },
      "ResultPath": "$.users",
      "OutputPath": "$",
      "Next": "SendChoice"
    },
    "SendChoice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.detail.send_type",
          "StringEquals": "email",
          "Next": "MapEmail"
        },
        {
          "Variable": "$.detail.send_type",
          "StringEquals": "template",
          "Next": "MapTemplate"
        }
      ],
      "Default": "SendNotification"
    },
    "MapEmail": {
      "Type": "Map",
      "ItemsPath": "$.users.emails",
      "ItemSelector": {
        "source_email.$": "$.detail.source_email",
        "email.$": "States.Array($$.Map.Item.Value)",
        "date.$": "States.ArrayGetItem(States.StringSplit($.time, 'T'), 0)",
        "reading.$": "$.reading.response.body"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "SendEmail",
        "States": {
          "SendEmail": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:sesv2:sendEmail",
            "Parameters": {
              "Content": {
                "Simple": {
                  "Subject": {
                    "Charset": "UTF-8",
                    "Data.$": "States.Format('${EmailSubject} for {}', $.date)"
                  },
                  "Body": {
                    "Html": {
                      "Charset": "UTF-8",
                      "Data.$": "$.reading"
                    }
                  }
                }
              },
              "Destination": {
                "ToAddresses.$": "$.email"
              },
              "FromEmailAddress.$": "$.source_email",
              "ReplyToAddresses.$": "States.Array($.source_email)"
            },
            "ResultSelector": {
              "message_id.$": "$.MessageId"
            },
            "ResultPath": "$.publish_result",
            "OutputPath": "$",
            "Next": "CleanUpEmail"
          },
          "CleanUpEmail": {
            "Type": "Pass",
            "Parameters": {
              "email.$": "$.email[0]",
              "message_id.$": "$.publish_result.message_id"
            },
            "End": true
          }
        }
      },
      "ResultPath": "$.email_result",
      "OutputPath": "$",
      "Next": "UpdateSentCount"
    },
    "MapTemplate": {
      "Type": "Map",
      "ItemsPath": "$.users.response",
      "ItemSelector": {
        "source_email.$": "$.detail.source_email",
        "data": {
          "email.$": "States.Array($$.Map.Item.Value.email)"
        },
        "template": {
          "date.$": "States.ArrayGetItem(States.StringSplit($.time, 'T'), 0)",
          "reading.$": "$.reading.response.body",
          "complete.$": "States.Format('{}?uid={}&user_id={}', $.detail.reading_endpoint, $.reading.response.uid, $$.Map.Item.Value.uid)",
          "unsubscribe.$": "States.Format('{}?unsubscribe={}', $.detail.user_endpoint, $$.Map.Item.Value.uid)"
        }
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "SendTemplate",
        "States": {
          "SendTemplate": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:ses:sendTemplatedEmail",
            "Parameters": {
              "Source.$": "$.source_email",
              "Destination": {
                "ToAddresses.$": "$.data.email"
              },
              "Template": "${EmailTemplate}",
              "TemplateData.$": "States.JsonToString($.template)"
            },
            "ResultSelector": {
              "message_id.$": "$.MessageId"
            },
            "ResultPath": "$.data.publish_result",
            "OutputPath": "$.data",
            "Next": "CleanUpTemplate"
          },
          "CleanUpTemplate": {
            "Type": "Pass",
            "Parameters": {
              "email.$": "$.email[0]",
              "message_id.$": "$.publish_result.message_id"
            },
            "End": true
          }
        }
      },
      "ResultPath": "$.email_result",
      "OutputPath": "$",
      "Next": "UpdateSentCount"
    },
    "UpdateSentCount": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.detail.reading_endpoint",
        "Method": "GET",
        "Authentication": {
          "ConnectionArn": "${Connection}"
        },
        "Headers": {
          "content-type": "application/json"
        },
        "QueryParameters": {
          "uid.$": "$.reading.response.uid",
          "sent_count.$": "States.ArrayLength($.email_result)"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "uid.$": "$.ResponseBody.uid",
        "sent_date.$": "$.ResponseBody.sent_date",
        "sent_count.$": "$.ResponseBody.sent_count"
      },
      "ResultPath": "$",
      "OutputPath": "$",
      "End": true
    },
    "SendNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${Topic}",
        "Subject.$": "States.Format('${EmailSubject} on {}', States.ArrayGetItem(States.StringSplit($.time, 'T'), 0))",
        "Message.$": "$.reading.response.body"
      },
      "ResultSelector": {
        "message_id.$": "$.MessageId",
        "request_id.$": "$.SdkResponseMetadata.RequestId"
      },
      "ResultPath": "$.publish_result",
      "OutputPath": "$",
      "End": true
    }
  }
}