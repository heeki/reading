AWSTemplateFormatVersion: '2010-09-09'
Description: Reading scheduler and reminder
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Environment:
      Variables:
        REDIRECT_URL: !Ref pRedirectUrl
        TABLE: !Ref Table
    Handler: fn.handler
    Layers:
      - arn:aws:lambda:us-east-1:546275881527:layer:xray-python3:3
      - arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:38
      - !Ref LayerLibraries
    MemorySize: !Ref pFnMemory
    Runtime: python3.11
    Timeout: !Ref pFnTimeout
    Tracing: Active
Parameters:
  # APIGW
  pApiDomainName:
    Type: String
  pApiBasePath:
    Type: String
  pApiStage:
    Type: String
  # Lambda
  pFnMemory:
    Type: Number
  pFnTimeout:
    Type: Number
  pRedirectUrl:
    Type: String
Resources:
  # DynamoDB
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: category
          AttributeType: S
        - AttributeName: uid
          AttributeType: S
        - AttributeName: description
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: uid
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: description
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: description
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: infrastructure
        - Key: application:owner
          Value: heeki
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: ERROR
          DataTraceEnabled: true
          MetricsEnabled: true
      StageName: !Ref pApiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../openapi.yaml
      Tags:
        application:group: reading
        application:subgroup: api
        application:owner: heeki
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/reading-${Api}"
      RetentionInDays: 7
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: api
        - Key: application:owner
          Value: heeki
  ApiMapping:
    DependsOn: Api
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId: !Ref Api
      BasePath: !Ref pApiBasePath
      DomainName: !Ref pApiDomainName
      Stage: !Ref pApiStage
    DependsOn:
      - ApiStage
  # Lambda
  LayerLibraries:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11
      ContentUri: ../../tmp/libraries
      LayerName: reading-libraries
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
        - PolicyName: dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt Table.Arn
  FnGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/group
      Role: !GetAtt FnRole.Arn
      LoggingConfig:
        LogFormat: JSON
      Tags:
        application:group: reading
        application:subgroup: group
        application:owner: heeki
  FnGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnGroup}'
      RetentionInDays: 7
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: group
        - Key: application:owner
          Value: heeki
  FnGroupPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnGroup.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  FnUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/user
      Role: !GetAtt FnRole.Arn
      LoggingConfig:
        LogFormat: JSON
      Tags:
        application:group: reading
        application:subgroup: user
        application:owner: heeki
  FnUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnUser}'
      RetentionInDays: 7
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: user
        - Key: application:owner
          Value: heeki
  FnUserPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnUser.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  FnPlan:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/plan
      Role: !GetAtt FnRole.Arn
      LoggingConfig:
        LogFormat: JSON
      Tags:
        application:group: reading
        application:subgroup: plan
        application:owner: heeki
  FnPlanLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnPlan}'
      RetentionInDays: 7
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: plan
        - Key: application:owner
          Value: heeki
  FnPlanPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnPlan.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  FnReading:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../src/reading
      Role: !GetAtt FnRole.Arn
      LoggingConfig:
        LogFormat: JSON
      Tags:
        application:group: reading
        application:subgroup: reading
        application:owner: heeki
  FnReadingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FnReading}'
      RetentionInDays: 7
      Tags:
        - Key: application:group
          Value: reading
        - Key: application:subgroup
          Value: reading
        - Key: application:owner
          Value: heeki
  FnReadingPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnReading.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outApiEndpoint:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${pApiStage}'
  outFnGroup:
    Value: !Ref FnGroup
  outFnUser:
    Value: !Ref FnUser
  outFnPlan:
    Value: !Ref FnPlan
  outFnReading:
    Value: !Ref FnReading
  outTableArn:
    Value: !GetAtt Table.Arn
  outLayerLibraries:
    Value: !Ref LayerLibraries
